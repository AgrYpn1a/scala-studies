#+title: Scala study notes

* Scala essentials
** Primitve types
~Int~, ~String~, ~Char~, ~Boolean~, ~Short~, ~Long~, ~Float~, ~Double~
** Variables
Variable declaration can be done using ~val~ ...
*** ~val~ - immutable
~val~ declaration is similar to declaring ~const~ in other languages such as C++.
Some properties of ~val~:
- ~val~ is immutable
- types are optional, this is because compiler can /infer/ the type
*** ~var~ - mutable
** Side effects
Declarations with ~var~ allow for side-effects, however in functional programming
we want to stick to immutability as much as possible as the code becomes more
clear and easier to read.

This, however, does not throw away immutability for good, since we still need
our programs to actually /do/ something.

We /should/ be aware of side effects.

Common examples of expressions producing side effects are:
- ~println()~, ~while~, ~reassignment of vars~ 
** Type inference
Another neat feature of Scala's compiler is the *type inference*. This allows for compiler to automatically deduce the types of certain expressions such as for example declaration of ~val~:
#+begin_src scala
val x = 5
#+end_src
** Expressions
Everything in Scala is an expression! (Except for def of vars, classes, packages or similar)

*** if-expressions
These expressions /always/ return a result. This is unlike in other languages, for example we can do
#+begin_src scala
val minValue = if (a < b) a else b
#+end_src
which is a rather common approach in functional programming.

*NOTE*: When every expression written in a language produces a value, then we call that style of programming *expression-oriented programming*.
*** Itertate expressions
We want to avoid using _loops_ such as *for*, *while* in the code. Instead, we prefer more functional oriented approach.

>> Avoid loops like a plague! We do NOT want imperative code!
*** ~Unit~ expressions
Reasigning a variable in Scala is a side-effect and  side effects in Scala are actually expressions returning (are of type) ~Unit~. Keep in mind these two examples:
#+begin_src scala
val aWeirdValue = (aVariable = 3)

var i = 0
val aWhile = while (i < 10) {
    println(i)
    i += 1
}
#+end_src
*** Code blocks
Code blocks are defined and recognised similar as in other languages - ~{}~ denote a code block.

Code blocks have their own scope, it is possible to declare variables inside it and they will remain scoped to that particular block.

>> The value of a /block/ is the value of its /last expression./
*** Expressions vs Instructions
- Instructions are /executed/.
- Expressions are /evaluated/.

  We'll think in terms of expressions in Scala, unlike, for exapmle, Java or C++.
** Functions
Calling a function is also an expression!

Parameterless functions can be called with just name.
#+begin_src scala
def f(): Int = 22
println(f)
#+end_src

Function ~f~ will actually be called, it is not a refenrece to a function in this case!

*NOTE*: When you need loops, use recursion instead!!!

*** Recursion
In Scala there are two different types of recursion, the usual "Stack recursion"
and the Scalish like recursion called "Tail recursion".

_NOTE_: When you need loops, use tail recursion!

**** ~@tailrec~ special annotation for tail recursion
You can add this special annotation to the function to tell the compiler that it
must be tail recursive, otherwise it should fail the compilation. This will help
you make sure you wrote a tail recursive function.

fib(0) = 0 fib(1) = 1 fib(n) = fib(n-1) + fib(n-2)
** Function arguments
*** Call by name vs. Call by value
In Scala we can pass as arguments the _concrete values_ (call by value) or the
actual _full expression_ which is then reevaluated each time it is used. For
example
#+begin_src scala
def callByValue(x: Long): Unit = {
    println("by value: " + x)
    println("by value: " + x)
}

def callByName(x: => Long): Unit = {
    println("by value: " + x)
    println("by value: " + x)
}

callByValue(System.nanoTime());
callByName(System.nanoTime());

// Outputs
// 749009216600625
// 749009216600625

// 749009218259250
// 749009218353750
#+end_src
and the results are different since the expression ~System.nanoTime()~ is
literllay /replacing/ the ~x~ value in the print statement, resulting in two
subsequent but different calls to the ~nanoTime()~ function.

*NOTE*: The operator ~=>~ used in the context of argument types delays the execution of
the provided expression until it is actually used.
*** Default args
When certain function arguments are shared among use cases such as with the tail
recursive definition of the _factorial_ function we want to provide default
arguments in order to avoid poluting function signature. For example
#+begin_src scala
def trFact(n: Int, acc: Int): Int = {
    if (n <= 1) acc
    else trFact(n - 1, acc * n)
}

val fact10 = trFact(10, 1)
val fact12 = trFact(12, 1)
val fact16 = trFact(16, 1)
val fact20 = trFact(10, 1)
#+end_src
the argument ~acc~ does not make sense to be exposed. In this case, we can either create a wrapepr function (which is some extra unnecessary work) or use a default argument for the accumulator. We can now redefine function as such:
#+begin_src scala
def trFact(n: Int, acc: Int = 1): Int = {
    if (n <= 1) acc
    else trFact(n - 1, acc * n)
}
val fact10 = trFact(10)
#+end_src
*** Named args
In the example where we have multiple arguments with some defaults set, but we want to pass in other arguments such as in this case
#+begin_src scala
def savePicture(format: String = "jpg", width: Int, height: Int): Unit =
    println("saving picture...")

savePicture("jpg", 800, 600)
savePicture("jpg", 1024, 860)
savePicture("jpg", 1920, 1080)
#+end_src
we can do the following:
1) Pass in every leading argument
2) Name the arguments

Of course it makes more sense to go with option 2) cause we want to avoid repeating ourselves when that is unnecessary. Here's an example of how we can use named arguments in this case:
#+begin_src scala
savePicture(width = 800, height = 600)
#+end_src
This also implies that we can pass named arguments in any order that we want.
** Strings Operations
As in every other language there are predefined operations on strings in Scala that do replace, split, substring etc. - however, there are Scala-specific string operations that we should take note of.

*** String concatenation
The ~+:~ and ~:+~ operators are used to concatenate chars to a string, _prepend_ or _append_.
#+begin_src scala
val aNumberString = "45"
println('a' +: aNumberString :+ 'z')
#+end_src

**** S-interpolators
#+begin_src scala
val name = "David"
val age = 12

val greeting = s"Hello, my name is $name and I am $age years old"
val greetingExpr = s"Hello, my name is $name and I am ${age + 1} years old"
#+end_src

**** F-interpolators
Similar to the s-interpolators with the addition of having ability to add special formatting.
#+begin_src scala
val speed = 1.2f
val myth = f"$name can eat $speed%2.2f"
#+end_src

**** raw-interpolators
Escape characters are printed literally.
#+begin_src scala
println(raw"this is a \n newline") // > this is a \n newline
#+end_src

* Object Oriented programming in Scala
** Class and class construction
Class can be defined (unlike in other languages) by providing the constructor parameters in the definition itself
#+begin_src scala
class Person(val name: String, val age: Int)
#+end_src

We can have multiple constructors defined as
#+begin_src scala
class Person(val name: String, val age: Int) {
  def this(name: String) = this(name, 0)
}
#+end_src
** Syntactic sugars
*** Infix notation
Calling objects method that takes a single parameter can be written as an operator between the object and the argument.
#+begin_src scala
class Person(val name: String, favoriteMovie: String) {
  def likes(movie: String): Boolean = movie == favoriteMovie
}

val mary = new Person("Mary", "Inception")
println(mary likes "Inception") // Infix operator notation
#+end_src
*** Operators
_All operators are methods._

Meaning that methods with a single parameter can be be invoked by writing it as
an operator (example above) and all existing and predefined operators (such as
operators on numbers) can be invoked as methods, using the standard method
invocation syntax.

#+begin_src scala
println(mary + tom)
println(mary.+(tom))

println(1 + 2)
println(1.+(2))
#+end_src

_Unary operators are also methods._
#+begin_src scala
// The two statements are equal
println(-1)
println(1.unary_-)
#+end_src

In order to define the unary operator a special name must be given to it:
#+begin_src scala
class Person(val name: String, favoriteMovie: String) {
  def unary_! :String = s"${name} what the heck?!"
}
#+end_src

Postfix notation also exists, but is rarely used as it can make the code consufing to read.
#+begin_src scala
class Person(val name: String, favoriteMovie: String) {
  def isAlive: Boolean = true
}

println(mary isAlive)
println(mary.isAlive) // we prefer invoking methods like this
#+end_src

_Special method ~apply~_:
If we try to invoke the object as a method, the compiler will implicitly call the ~apply()~ method.
#+begin_src scala
class Person(val name: String, favoriteMovie: String) {
  def apply(): String = s"Hi, my name is $name and I like $favoriteMovie"
}

println(mary.apply())
println(mary()) // equivalent
#+end_src
** Objects
An ~object~ in Scala defines a new type and also its only instance. Objects in
Scala are singletons! For example:
#+begin_src scala
object Person {
  val MY_CONST = 12
  def isHuman: Boolean = true
}
#+end_src

*** Companion objects (Companions)
A common pattern used in Scala where we define a /class/ and an /object/ with the same name. This way we are able to define class level functionality (in object) and instance level functionality (in class).
#+begin_src scala
  object Person {
    val N_EYES = 2
    def canFly: Boolean = false
  }

  class Person(val name: String) {
    def apply(): String =
      s"Hey I am ${this.name} and I have ${Person.N_EYES} eyes."

  }
#+end_src
We also usually use /object/ to define factory methods:
#+begin_src scala
object Person {
  // A factory method
  def from(mother: Person, father: Person): Person = new Person("Bobbie")
  // Often in practice, we call these methods apply
  // so that we can write this in a more convinient way
  def apply(mother: Person, father: Person): Person = new Person("Bobbie")
}

val bobbie = Person.from(john, mary)
val bobbie1 = Person.apply(john, mary)
// We want to use it like this
val bobbie2 = Person(john, mary)

#+end_src
** Scala applications
#+begin_src scala
object ScalaApps extends App {
  /* Scala application */
  /*
   * We extend App if we want to make our code runnable,
   * since app defines special `main` function which allows
   * for code to run.
   *
   * If we do not extend the App, we can define our own main:
   * def main(args: Array[String]): Unit
   *
   */
}
#+end_src
** Inheritance
Scala offers single class inheritance, unlike for example, C++ where a class can
inherit from multiple classes. A class inherits all _public_ class members of the
base class.

/All class members in Scala are public by default./

More Scala power comes from ~traits~.

*** Overriding in Scala
In Scala we can override *methods* and *fields* (values) as such:
#+begin_src scala

  class Animal {
    val creatureType = "wild"
    def eat = println("nomnom")
  }

  class Dog extends Animal {
    override val creatureType = "domestic"
    override def eat = println("crunch, crunch")
  }

  // We can also override value in the constructor!
  class Dog(override val creatureType: String = "domestic") extends Animal

  val dog = new Dog("myOwnCreatureType")
#+end_src

*NOTE*: We can assume the use of _polymorphism_ as in any other language.

Calling methods from parent classes is done through ~super~ keyword:
#+begin_src scala
def myMethod = {
  super.myMethod()
}
#+end_src

Limiting overrides is done using ~final~ keyword on member. It can also be used on
class itself, which prevents the entire class from being extended, similar to
Java.

Special way in Scala is to seal the class with keyword ~sealed~. Sealing is softer constraint as it allows extending the class within the scope of the file, but prevents outside the file.
** Abstract data types
Classes which contain unimplemented members are called *abstract* classes. Same as
usual, abstract classes cannot be instantiated, a definition for abstract
members must be provided.

Abstract classes can be defined and extended as such
#+begin_src scala
  abstract class Animal {
    val creatureType: String
    def eat: Unit
  }

  class Dog extends Animal {
    override val creatureType = "Domestic"
    override def eat = println("crunch, crunch")
  }

  val dog: Animal = new Dog
  dog.eat

#+end_src

*Traits* are ultimate abstract types in Scala. Similar to /interfaces/ in Java or
 other langauges. Class can implement multiple traits.
#+begin_src scala

  trait Carnivore {
    def eat(animal: Animal): Unit
  }

  trait ColdBlooded

  class Crocodile extends Animal with Carnivore with ColdBlooded {
    val creatureType: String = "croc"
    def eat: Unit = println("nomnomnom")
    def eat(animal: Animal): Unit = println(
      s"I'm a croc and I'm eating ${animal.creatureType}"
    )
  }

#+end_src

Unlike in Java, abstract classes may contain /non-abstract/ members while still
containing abstract members, and this is also true for traits. So what's the
difference then?

1) Traits do not have constructor parameters (possible in Scala 3)
2) Mutliple traits may be inherited by the same class
3) Traits are usually considered to be behaviours and are named as such, while
   abstract classes are the actual things - it should be clear from the example above.
** Scala type hierarchy
TODO: Inser scala type hierarchy here
